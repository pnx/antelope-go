package chain_test

import (
	"testing"

	"github.com/pnx/antelope-go/chain"
	"github.com/pnx/antelope-go/internal/assert"
)

func TestPublicKey(t *testing.T) {
	var pk *chain.PublicKey
	pk = chain.NewPublicKey(chain.K1, []byte{
		0x02, 0x23, 0xe0, 0xae, 0x8a, 0xac, 0xb4, 0x1b, 0x06, 0xdc, 0x74, 0xaf, 0x1a, 0x56, 0xb2, 0xeb, 0x69,
		0x13, 0x3f, 0x07, 0xf7, 0xf7, 0x5b, 0xd1, 0xd5, 0xe5, 0x33, 0x16, 0xbf, 0xf1, 0x95, 0xed, 0xf4,
	})
	assert.JSONCoding(t, pk, `"PUB_K1_5AHoNnWetuDhKWSDx3WUf8W7Dg5xjHCMc4yHmmSiaJCFvvAgnB"`)
	assert.ABICoding(t, pk, []byte{
		0x00, 0x02, 0x23, 0xe0, 0xae, 0x8a, 0xac, 0xb4, 0x1b, 0x06, 0xdc, 0x74, 0xaf, 0x1a, 0x56, 0xb2, 0xeb,
		0x69, 0x13, 0x3f, 0x07, 0xf7, 0xf7, 0x5b, 0xd1, 0xd5, 0xe5, 0x33, 0x16, 0xbf, 0xf1, 0x95, 0xed, 0xf4,
	})

	pk = chain.NewPublicKey(chain.WA, []byte{
		0x02, 0x20, 0xb9, 0xda, 0xb5, 0x12, 0xe8, 0x92, 0x39, 0x2a, 0x44, 0xa9, 0xf4, 0x1f, 0x94, 0x33, 0xc9,
		0xfb, 0xd8, 0x0d, 0xb8, 0x64, 0xe9, 0xdf, 0x58, 0x89, 0xc2, 0x40, 0x7d, 0xb3, 0xac, 0xbb, 0x9f, 0x01,
		0x0d, 0x6b, 0x65, 0x6f, 0x73, 0x64, 0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	})
	assert.JSONCoding(t, pk, `"PUB_WA_WdCPfafVNxVMiW5ybdNs83oWjenQXvSt1F49fg9mv7qrCiRwHj5b38U3ponCFWxQTkDsMC"`)
	assert.ABICoding(t, pk, []byte{
		0x02, 0x02, 0x20, 0xb9, 0xda, 0xb5, 0x12, 0xe8, 0x92, 0x39, 0x2a, 0x44, 0xa9, 0xf4, 0x1f, 0x94, 0x33, 0xc9, 0xfb, 0xd8, 0x0d, 0xb8, 0x64, 0xe9, 0xdf, 0x58, 0x89, 0xc2, 0x40, 0x7d, 0xb3, 0xac, 0xbb, 0x9f, 0x01, 0x0d, 0x6b, 0x65, 0x6f, 0x73, 0x64, 0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	})
}

func TestPublicKeyFromString(t *testing.T) {
	pk, err := chain.NewPublicKeyFromString("PUB_K1_5Q7Eg8atoW3RTE94A6qR7aEbyX7ue5V8uXxhkQGiz9grnB4mzt")
	assert.NoError(t, err)
	if pk != nil {
		assert.JSONCoding(t, pk, `"PUB_K1_5Q7Eg8atoW3RTE94A6qR7aEbyX7ue5V8uXxhkQGiz9grnB4mzt"`)
		assert.ABICoding(t, pk, []byte{0x0, 0x2, 0x43, 0x40, 0xb8, 0x9d, 0x3, 0x6f, 0x81, 0xf, 0xd, 0xb9, 0xa4, 0x2c, 0x7, 0xd, 0x6c, 0x92, 0x62, 0x5d, 0x91, 0xe7, 0xef, 0x86, 0xf, 0x6a, 0x77, 0x2c, 0x8b, 0x45, 0xbe, 0xde, 0x58, 0x13})
	}

	pk, err = chain.NewPublicKeyFromString("EOS5WrqjXHEfFGZy4mV86Z1DvcjigiKrH1BDYefNMwNBHUHG1cSm7")
	assert.NoError(t, err)
	if pk != nil {
		assert.JSONCoding(t, pk.LegacyString("EOS"), `"EOS5WrqjXHEfFGZy4mV86Z1DvcjigiKrH1BDYefNMwNBHUHG1cSm7"`)
		assert.ABICoding(t, pk, []byte{0x0, 0x2, 0x52, 0x95, 0x67, 0x45, 0x91, 0x35, 0xf, 0x98, 0x3e, 0x15, 0xb7, 0x9b, 0x6e, 0xa7, 0x2, 0x5a, 0x41, 0xd, 0xc8, 0x60, 0x89, 0xa6, 0xb1, 0x32, 0xd4, 0x9, 0x9b, 0xbe, 0xe7, 0xc5, 0x1d, 0x87})
	}
}
