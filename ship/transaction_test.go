package ship_test

import (
	"bytes"
	"io"
	"testing"

	"github.com/pnx/antelope-go/abi"
	"github.com/pnx/antelope-go/chain"
	"github.com/pnx/antelope-go/internal/assert"
	"github.com/pnx/antelope-go/ship"
)

var trace = ship.TransactionTrace{
	V0: &ship.TransactionTraceV0{
		ID: chain.Checksum256{
			0x71, 0xf9, 0xaf, 0xc5, 0x19, 0xea, 0xb1, 0xbc, 0xf5, 0x99, 0xbd, 0xed, 0x58, 0x48, 0xf3, 0x16,
			0x7c, 0x16, 0x03, 0x23, 0x8f, 0x4e, 0xb0, 0xf7, 0x99, 0x85, 0x65, 0xb5, 0x59, 0xb0, 0xb9, 0x88,
		},
		Status:        chain.TransactionStatusExecuted,
		CPUUsageUS:    100,
		NetUsage:      42,
		NetUsageWords: 17,
		ActionTraces: []*ship.ActionTrace{
			{
				V1: &ship.ActionTraceV1{
					ActionOrdinal: 1,
					Receipt: &ship.ActionReceipt{
						V0: &ship.ActionReceiptV0{
							Receiver: chain.N("eosio"),
							ActDigest: chain.Checksum256{
								0xd7, 0x8f, 0x98, 0x51, 0xa8, 0x9b, 0x74, 0x8b,
								0x9c, 0xd8, 0xcc, 0xf7, 0x96, 0x38, 0x69, 0x49,
								0x67, 0x90, 0xca, 0x40, 0xfa, 0x70, 0x18, 0xf1,
								0xa7, 0x36, 0x17, 0xaa, 0x8f, 0x33, 0x86, 0x2a,
							},
							GlobalSequence: 357180020394,
							RecvSequence:   353992801,
							AuthSequence:   []ship.AccountAuthSequence{{Account: chain.N("eosio"), Sequence: 282750771}},
							CodeSequence:   18,
							ABISequence:    19,
						},
					},
					Receiver: chain.N("eosio"),
					Act: chain.Action{
						Account:       chain.N("eosio"),
						Name:          chain.N("onblock"),
						Authorization: []chain.PermissionLevel{{Actor: chain.N("eosio"), Permission: chain.N("active")}},
						Data: []byte{
							0xc6, 0xea, 0x11, 0x56, 0x40, 0x5d, 0xa6, 0x29,
							0x6a, 0xaa, 0x30, 0x55, 0x00, 0x00, 0x10, 0xa1,
							0xa2, 0xf2, 0x20, 0x05, 0xb1, 0xab, 0x06, 0xb2,
							0x0d, 0x32, 0xc0, 0x79, 0xe7, 0x78, 0x1c, 0x30,
							0xf7, 0x6d, 0xba, 0x48, 0x12, 0x30, 0xa9, 0xa9,
							0x86, 0xfa, 0x23, 0x12, 0xe8, 0xd8, 0xbc, 0x4e,
							0xdc, 0x41, 0x60, 0x82, 0x27, 0x30, 0xa7, 0x57,
							0x76, 0x4a, 0x14, 0x99, 0xbd, 0xa6, 0x08, 0xaa,
							0x8c, 0x91, 0x60, 0x9c, 0x48, 0x81, 0x52, 0xdf,
							0xaf, 0x8e, 0xf0, 0xd6, 0x09, 0x62, 0x20, 0xfc,
							0x50, 0xf6, 0xdb, 0x4c, 0x1e, 0x93, 0x14, 0x88,
							0x33, 0x3d, 0x1f, 0x88, 0x58, 0x57, 0x2c, 0x5d,
							0x6e, 0xd7, 0x8b, 0x67, 0xae, 0x1e, 0xfb, 0xc7,
							0x58, 0x26, 0xed, 0xba, 0x7f, 0x0f, 0x03, 0x08,
							0x00, 0x00, 0x00, 0x00,
						},
					},
					AccountRamDeltas: []ship.AccountDelta{{Account: chain.N("eosio"), Delta: -2}},
					ErrorCode:        24,
					ReturnValue:      []uint8{0xf3},
				},
			},
		},
		AccountDelta:    nil,
		Elapsed:         177,
		Scheduled:       false,
		FailedDtrxTrace: nil,
		Partial: &ship.PartialTransaction{
			V0: &ship.PartialTransactionV0{
				TransactionExtensions: []ship.Extension{
					{Type: 22, Data: []uint8{0xf2, 0x05}},
				},
				Signatures: []chain.Signature{
					chain.MustNewSignatureString("SIG_K1_KkEZbBin7JFPiq4RUNJ5cvBc6GkUnNS7M348WoGeTKKEJ4gpjzvX5YVVsZ2pikPvxLeQ3VmyVw2kD1scx7bCeyadcBnoVn"),
				},
				ContextFreeData: []uint8{0x07, 0x02},
			},
		},
	},
}

var encodedData = []byte{
	0x0, 0x71, 0xf9, 0xaf, 0xc5, 0x19, 0xea, 0xb1, 0xbc, 0xf5, 0x99, 0xbd, 0xed, 0x58, 0x48, 0xf3, 0x16, 0x7c, 0x16, 0x3, 0x23, 0x8f, 0x4e, 0xb0, 0xf7, 0x99, 0x85, 0x65, 0xb5, 0x59, 0xb0, 0xb9, 0x88, 0x0, 0x64, 0x0, 0x0, 0x0, 0x11, 0xb1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0xd7, 0x8f, 0x98, 0x51, 0xa8, 0x9b, 0x74, 0x8b, 0x9c, 0xd8, 0xcc, 0xf7, 0x96, 0x38, 0x69, 0x49, 0x67, 0x90, 0xca, 0x40, 0xfa, 0x70, 0x18, 0xf1, 0xa7, 0x36, 0x17, 0xaa, 0x8f, 0x33, 0x86, 0x2a, 0xaa, 0x96, 0x96, 0x29, 0x53, 0x0, 0x0, 0x0, 0x61, 0x80, 0x19, 0x15, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0x33, 0x6f, 0xda, 0x10, 0x0, 0x0, 0x0, 0x0, 0x12, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0x0, 0x0, 0x0, 0x0, 0x22, 0x1a, 0xcf, 0xa4, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0x0, 0x0, 0x0, 0x0, 0xa8, 0xed, 0x32, 0x32, 0x74, 0xc6, 0xea, 0x11, 0x56, 0x40, 0x5d, 0xa6, 0x29, 0x6a, 0xaa, 0x30, 0x55, 0x0, 0x0, 0x10, 0xa1, 0xa2, 0xf2, 0x20, 0x5, 0xb1, 0xab, 0x6, 0xb2, 0xd, 0x32, 0xc0, 0x79, 0xe7, 0x78, 0x1c, 0x30, 0xf7, 0x6d, 0xba, 0x48, 0x12, 0x30, 0xa9, 0xa9, 0x86, 0xfa, 0x23, 0x12, 0xe8, 0xd8, 0xbc, 0x4e, 0xdc, 0x41, 0x60, 0x82, 0x27, 0x30, 0xa7, 0x57, 0x76, 0x4a, 0x14, 0x99, 0xbd, 0xa6, 0x8, 0xaa, 0x8c, 0x91, 0x60, 0x9c, 0x48, 0x81, 0x52, 0xdf, 0xaf, 0x8e, 0xf0, 0xd6, 0x9, 0x62, 0x20, 0xfc, 0x50, 0xf6, 0xdb, 0x4c, 0x1e, 0x93, 0x14, 0x88, 0x33, 0x3d, 0x1f, 0x88, 0x58, 0x57, 0x2c, 0x5d, 0x6e, 0xd7, 0x8b, 0x67, 0xae, 0x1e, 0xfb, 0xc7, 0x58, 0x26, 0xed, 0xba, 0x7f, 0xf, 0x3, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x30, 0x55, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x1, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf3, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x16, 0x0, 0x2, 0xf2, 0x5, 0x1, 0x0, 0x20, 0x76, 0x60, 0x52, 0xbc, 0x32, 0x8a, 0xeb, 0xb8, 0x71, 0x9c, 0x9d, 0x8e, 0x73, 0x7c, 0x8e, 0xdb, 0xf3, 0x28, 0x17, 0x17, 0xd, 0x4a, 0xfc, 0x6d, 0x27, 0xfc, 0x27, 0xfb, 0xfc, 0x35, 0x3c, 0x93, 0x20, 0x59, 0xff, 0x68, 0x7c, 0x24, 0x2b, 0x8d, 0x93, 0xf0, 0xd7, 0xc7, 0x46, 0x60, 0x11, 0xce, 0xd8, 0xd3, 0x0, 0x3b, 0xca, 0xaf, 0xc5, 0xae, 0x26, 0xc0, 0x9f, 0x85, 0xb3, 0xc2, 0xb6, 0x3, 0x2, 0x7, 0x2,
}

func TestTransactionTraceEncode(t *testing.T) {
	buf := new(bytes.Buffer)
	err := abi.NewEncoder(buf, abi.DefaultEncoderFunc).Encode(trace)
	assert.NoError(t, err)

	actual, err := io.ReadAll(buf)
	assert.NoError(t, err)
	assert.Equal(t, actual, encodedData)
}

func TestTransactionTraceDecode(t *testing.T) {
	actual := ship.TransactionTrace{}
	err := abi.NewDecoder(bytes.NewBuffer(encodedData), abi.DefaultDecoderFunc).Decode(&actual)
	assert.NoError(t, err)

	assert.Equal(t, actual, trace)
}
