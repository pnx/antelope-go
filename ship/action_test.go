package ship_test

import (
	"bytes"
	"io"
	"testing"

	"github.com/shufflingpixels/antelope-go/abi"
	"github.com/shufflingpixels/antelope-go/chain"
	"github.com/shufflingpixels/antelope-go/internal/assert"
	"github.com/shufflingpixels/antelope-go/ship"
)

var actV0 = ship.ActionTrace{
	V0: &ship.ActionTraceV0{
		ActionOrdinal: 1,
		Receipt: &ship.ActionReceipt{
			V0: &ship.ActionReceiptV0{
				Receiver: chain.N("eosio"),
				ActDigest: chain.Checksum256{
					0xd7, 0x8f, 0x98, 0x51, 0xa8, 0x9b, 0x74, 0x8b,
					0x9c, 0xd8, 0xcc, 0xf7, 0x96, 0x38, 0x69, 0x49,
					0x67, 0x90, 0xca, 0x40, 0xfa, 0x70, 0x18, 0xf1,
					0xa7, 0x36, 0x17, 0xaa, 0x8f, 0x33, 0x86, 0x2a,
				},
				GlobalSequence: 357180020394,
				RecvSequence:   353992801,
				AuthSequence:   []ship.AccountAuthSequence{{Account: chain.N("eosio"), Sequence: 282750771}},
				CodeSequence:   18,
				ABISequence:    19,
			},
		},
		Receiver: chain.N("eosio"),
		Act: chain.Action{
			Account:       chain.N("eosio"),
			Name:          chain.N("onblock"),
			Authorization: []chain.PermissionLevel{{Actor: chain.N("eosio"), Permission: chain.N("active")}},
			Data: []byte{
				0xc6, 0xea, 0x11, 0x56, 0x40, 0x5d, 0xa6, 0x29,
				0x6a, 0xaa, 0x30, 0x55, 0x00, 0x00, 0x10, 0xa1,
				0xa2, 0xf2, 0x20, 0x05, 0xb1, 0xab, 0x06, 0xb2,
				0x0d, 0x32, 0xc0, 0x79, 0xe7, 0x78, 0x1c, 0x30,
				0xf7, 0x6d, 0xba, 0x48, 0x12, 0x30, 0xa9, 0xa9,
				0x86, 0xfa, 0x23, 0x12, 0xe8, 0xd8, 0xbc, 0x4e,
				0xdc, 0x41, 0x60, 0x82, 0x27, 0x30, 0xa7, 0x57,
				0x76, 0x4a, 0x14, 0x99, 0xbd, 0xa6, 0x08, 0xaa,
				0x8c, 0x91, 0x60, 0x9c, 0x48, 0x81, 0x52, 0xdf,
				0xaf, 0x8e, 0xf0, 0xd6, 0x09, 0x62, 0x20, 0xfc,
				0x50, 0xf6, 0xdb, 0x4c, 0x1e, 0x93, 0x14, 0x88,
				0x33, 0x3d, 0x1f, 0x88, 0x58, 0x57, 0x2c, 0x5d,
				0x6e, 0xd7, 0x8b, 0x67, 0xae, 0x1e, 0xfb, 0xc7,
				0x58, 0x26, 0xed, 0xba, 0x7f, 0x0f, 0x03, 0x08,
				0x00, 0x00, 0x00, 0x00,
			},
		},
		AccountRamDeltas: []ship.AccountDelta{{Account: chain.N("eosio")}},
	},
}

var encodedActV0 = []byte{
	0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xea, 0x30, 0x55, 0xd7, 0x8f, 0x98,
	0x51, 0xa8, 0x9b, 0x74, 0x8b, 0x9c, 0xd8, 0xcc,
	0xf7, 0x96, 0x38, 0x69, 0x49, 0x67, 0x90, 0xca,
	0x40, 0xfa, 0x70, 0x18, 0xf1, 0xa7, 0x36, 0x17,
	0xaa, 0x8f, 0x33, 0x86, 0x2a, 0xaa, 0x96, 0x96,
	0x29, 0x53, 0x00, 0x00, 0x00, 0x61, 0x80, 0x19,
	0x15, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xea, 0x30, 0x55, 0x33, 0x6f,
	0xda, 0x10, 0x00, 0x00, 0x00, 0x00, 0x12, 0x13,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x30, 0x55,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x30, 0x55,
	0x00, 0x00, 0x00, 0x00, 0x22, 0x1a, 0xcf, 0xa4,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x30,
	0x55, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xed, 0x32,
	0x32, 0x74, 0xc6, 0xea, 0x11, 0x56, 0x40, 0x5d,
	0xa6, 0x29, 0x6a, 0xaa, 0x30, 0x55, 0x00, 0x00,
	0x10, 0xa1, 0xa2, 0xf2, 0x20, 0x05, 0xb1, 0xab,
	0x06, 0xb2, 0x0d, 0x32, 0xc0, 0x79, 0xe7, 0x78,
	0x1c, 0x30, 0xf7, 0x6d, 0xba, 0x48, 0x12, 0x30,
	0xa9, 0xa9, 0x86, 0xfa, 0x23, 0x12, 0xe8, 0xd8,
	0xbc, 0x4e, 0xdc, 0x41, 0x60, 0x82, 0x27, 0x30,
	0xa7, 0x57, 0x76, 0x4a, 0x14, 0x99, 0xbd, 0xa6,
	0x08, 0xaa, 0x8c, 0x91, 0x60, 0x9c, 0x48, 0x81,
	0x52, 0xdf, 0xaf, 0x8e, 0xf0, 0xd6, 0x09, 0x62,
	0x20, 0xfc, 0x50, 0xf6, 0xdb, 0x4c, 0x1e, 0x93,
	0x14, 0x88, 0x33, 0x3d, 0x1f, 0x88, 0x58, 0x57,
	0x2c, 0x5d, 0x6e, 0xd7, 0x8b, 0x67, 0xae, 0x1e,
	0xfb, 0xc7, 0x58, 0x26, 0xed, 0xba, 0x7f, 0x0f,
	0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x30,
	0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00,
}

var actV1 = ship.ActionTrace{
	V1: &ship.ActionTraceV1{
		ActionOrdinal: 1,
		Receipt: &ship.ActionReceipt{
			V0: &ship.ActionReceiptV0{
				Receiver: chain.N("noloss111111"),
				ActDigest: chain.Checksum256{
					0x3a, 0x86, 0x2c, 0xe1, 0xee, 0x32, 0xcf, 0x2b,
					0x61, 0x5b, 0x94, 0x60, 0x05, 0xae, 0xd6, 0x7a,
					0x54, 0xc4, 0x4f, 0xc6, 0xde, 0xcf, 0x0b, 0x74,
					0x23, 0x00, 0x17, 0x21, 0x8e, 0x81, 0x4c, 0x37,
				},
				GlobalSequence: 357180020395,
				RecvSequence:   20515194,
				AuthSequence: []ship.AccountAuthSequence{
					{Account: chain.N("eddiewillers"), Sequence: 315000},
					{Account: chain.N("taggartdagny"), Sequence: 19100774},
				},
				CodeSequence: 1338,
				ABISequence:  88,
			},
		},
		Receiver: chain.N("noloss111111"),
		Act: chain.Action{
			Account: chain.N("noloss111111"),
			Name:    chain.N("trade"),
			Authorization: []chain.PermissionLevel{
				{Actor: chain.N("eddiewillers"), Permission: chain.N("active")},
				{Actor: chain.N("taggartdagny"), Permission: chain.N("active")},
			},
			Data: []byte{0xe0, 0x27, 0x33, 0x29, 0x5f, 0xc3, 0x98, 0xc9, 0x3A, 0xd6, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00},
		},
		AccountRamDeltas: nil,
		ReturnValue:      []uint8{},
	},
}

var encodedActV1 = []byte{
	0x01, 0x01, 0x00, 0x01, 0x00, 0x10, 0x42, 0x08,
	0x21, 0x60, 0x4c, 0x23, 0x9d, 0x3a, 0x86, 0x2c,
	0xe1, 0xee, 0x32, 0xcf, 0x2b, 0x61, 0x5b, 0x94,
	0x60, 0x05, 0xae, 0xd6, 0x7a, 0x54, 0xc4, 0x4f,
	0xc6, 0xde, 0xcf, 0x0b, 0x74, 0x23, 0x00, 0x17,
	0x21, 0x8e, 0x81, 0x4c, 0x37, 0xab, 0x96, 0x96,
	0x29, 0x53, 0x00, 0x00, 0x00, 0x7a, 0x09, 0x39,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0xaf,
	0x8a, 0xd1, 0x71, 0xe5, 0x52, 0x52, 0x78, 0xce,
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x27,
	0x33, 0x29, 0x5f, 0xc3, 0x98, 0xc9, 0x66, 0x74,
	0x23, 0x01, 0x00, 0x00, 0x00, 0x00, 0xba, 0x0a,
	0x58, 0x10, 0x42, 0x08, 0x21, 0x60, 0x4c, 0x23,
	0x9d, 0x10, 0x42, 0x08, 0x21, 0x60, 0x4c, 0x23,
	0x9d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0xcc,
	0xcd, 0x02, 0x80, 0xaf, 0x8a, 0xd1, 0x71, 0xe5,
	0x52, 0x52, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xed,
	0x32, 0x32, 0xe0, 0x27, 0x33, 0x29, 0x5f, 0xc3,
	0x98, 0xc9, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xed,
	0x32, 0x32, 0x10, 0xe0, 0x27, 0x33, 0x29, 0x5f,
	0xc3, 0x98, 0xc9, 0x3a, 0xd6, 0x05, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00,
}

func TestActionV0Encode(t *testing.T) {
	buf := new(bytes.Buffer)
	err := abi.NewEncoder(buf, abi.DefaultEncoderFunc).Encode(actV0)
	assert.NoError(t, err)

	data, err := io.ReadAll(buf)
	assert.NoError(t, err)
	assert.Equal(t, data, encodedActV0)
}

func TestActionV0Decode(t *testing.T) {
	actual := ship.ActionTrace{}
	err := abi.NewDecoder(bytes.NewBuffer(encodedActV0), abi.DefaultDecoderFunc).Decode(&actual)
	assert.NoError(t, err)
	assert.Equal(t, actual, actV0)
}

func TestActionV1Encode(t *testing.T) {
	buf := new(bytes.Buffer)
	err := abi.NewEncoder(buf, abi.DefaultEncoderFunc).Encode(actV1)
	assert.NoError(t, err)

	data, err := io.ReadAll(buf)
	assert.NoError(t, err)
	assert.Equal(t, data, encodedActV1)
}

func TestActionV1Decode(t *testing.T) {
	actual := ship.ActionTrace{}
	err := abi.NewDecoder(bytes.NewBuffer(encodedActV1), abi.DefaultDecoderFunc).Decode(&actual)
	assert.NoError(t, err)
	assert.Equal(t, actual, actV1)
}
